name: Release

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  
jobs:                                            
  release:     
    name: Release                                
    runs-on: ubuntu-latest                       
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash    
    
    steps:
    
    # Cancel any previous runs.
    - name: Cancel Previous Runs               
      uses: styfle/cancel-workflow-action@0.4.1
      with:                                    
        access_token: ${{ github.token }} 
    
    # Checkout the code.
    - name: Checkout                                  
      uses: actions/checkout@v2                       
      with:                                           
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Initialize Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: ${{matrix.python-version}}
     
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt    

    - name: Test app
      run: |
        pytest src/

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: richardboydii/xyz-demo-app:latest

    #Configure AWS credentials.
    - name: Configure AWS credentials                          
      uses: aws-actions/configure-aws-credentials@v1           
      with:                                                    
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set EKS Info
      run: |
        aws eks --region ${{env.AWS_REGION}} update-kubeconfig --name ${{env.EKS_CLUSTER}}

    - name: Check Cluster
      run: |
        kubectl version --short

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
